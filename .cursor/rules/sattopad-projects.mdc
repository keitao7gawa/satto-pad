---
alwaysApply: true
---
# SattoPad
## コンセプト
- macOSネイティブのメニューバー常駐型メモ帳アプリ
- 設定したグローバルショートカットキー（例: `Cmd + Shift + T`）を押すことで、いつも即座にメモ帳を呼び出し、素早くメモを確認・編集できるツール

## 主要な機能要件
- メニューバー常駐: Dockには表示せず、メニューバーに常駐
- グローバルショートカット: `Cmd + Shift + T`でアプリの表示/非表示を切り替え
- テキスト編集機能: `TextEditor`を使用したシンプルな複数行テキスト入力機能
- ファイルへの保存と読み込み: メモの内容をローカルのMarkdownファイル（例: `~/Documents/SattoPad.md`）に自動で保存し、次回起動時に読み込み
    - 保存先の設定: 任意のローカルファイルパスを設定可能（以後は自動保存・参照）
- （将来）Markdown対応: 入力されたMarkdown記法をリアルタイムでプレビュー

## 技術仕様
- 言語: Swift
- UIフレームワーク: SwiftUI
- ターゲットOS: macOS 13+（推奨 14+）
- メニューバーUI: `MenuBarExtra` を利用
- Dock非表示: `Info.plist` の `LSUIElement` を `YES`

## 非機能要件
- 起動からポップオーバー表示まで < 300ms（初回除く）
- 入力の自動保存は最終入力から約1秒のデバウンスで発火、保存処理は < 100ms を目安
- 常駐時のメモリ使用量はおおむね < 100MB を目安
- ファイルI/O失敗時はユーザーに通知し、直前の入力はアプリ側で保持

## 設定/永続化
- 設定項目: Markdownファイルパス、グローバルショートカット
- 保存先: `UserDefaults`（キー例: `sattoPad.markdownPath`, `sattoPad.hotkey`）
- 既定値: ファイルは `~/Documents/SattoPad.md`、ショートカットは `Cmd + Shift + T`

## 権限・セキュリティ
- グローバルショートカットは Carbon の `RegisterEventHotKey` または外部ライブラリ（例: KeyboardShortcuts）を利用し、アクセシビリティ権限不要の方式を優先
- アプリをサンドボックス化する場合はファイル保存先に対してセキュリティスコープ付きブックマークを検討

## エラー処理方針
- 既定ファイルが存在しない場合は自動作成
- 読み込み失敗時: 空のメモで起動し、エラーをUIで明示
- 保存失敗時: リトライと保存先再設定を促すUIを提供

## 開発アプローチ
- MVP（Minimum Viable Product）を優先し、段階的に機能を実装
1. 最優先: メニューバー常駐、ポップオーバー表示、シンプルなテキスト入力欄
   - 受け入れ基準: Dock非表示、`MenuBarExtra`からポップオーバーを開閉でき、編集が可能
2. 第二段階: グローバルショートカットの登録とトグル動作
   - 受け入れ基準: 既定ショートカットで表示/非表示が切り替わる。設定変更が可能
3. 第三段階: 自動保存・読み込み
   - 受け入れ基準: 入力がデバウンス保存され、再起動で内容が復元。保存先変更が可能
4. 最終段階: UIの装飾（半透明など）やMarkdownプレビュー（将来）

## プロジェクト構成
- `Xcode`で新規プロジェクトとして作成済み
- `SattoPadApp.swift`: アプリのエントリーポイント（`MenuBarExtra`を定義）
- `ContentView.swift`: メモ帳のUI（`TextEditor`）
- `Assets.xcassets`: メニューバーに表示するアプリアイコンを格納
- `Info.plist`: `LSUIElement`などのアプリ設定
- テストターゲット: 初期段階の簡素化のためユニット/UITestは削除済み